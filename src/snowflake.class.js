'use strict';

// require packages
const debug = require('./debug.js');

/**
 * @class
 * @classdesc it is used in generating Snowflake IDs.
 */
const Snowflake = class {
  // Milliseconds since Snowflake Epoch, the first second of 2022 or 1640995200000.
  static #epoch = Date.UTC(2022, 0, 1, 0, 0, 0, 0);
  static #BITS = {
    timestamp: 41,
    machineProcessId: 16,
    sequenceId: 7
  };
  static #totalMachineProcessIds = 1 << this.#BITS.machineProcessId;
  static #totalSequenceIds = 1 << this.#BITS.sequenceId;

  /**
   * @method
   * @returns {number} return current timestamp.
   */
  static #currentTimestamp() {
    return new Date().getTime();
  }

  #lastTimestamp;
  #machineProcessId;
  #sequenceId;

  /**
   * @method
   * @param {number} machineProcessId - A unique id is assigned to each machine process.
   */
  constructor(machineProcessId) {
    debug.snowflake(`Snowflake constructor called with machineProcessId: ${machineProcessId}`);
    this.#lastTimestamp = Snowflake.#epoch;
    this.#machineProcessId = machineProcessId;
    this.#sequenceId = 0;
  }

  /**
   * @method
   * @returns {string} snowflake id.
   */
  id() {
    let currTimestamp = Snowflake.#currentTimestamp();
    if (currTimestamp < this.#lastTimestamp) {
      return null;
    }
    if (currTimestamp === this.#lastTimestamp) {
      this.#sequenceId = (this.#sequenceId + 1) & (Snowflake.#totalSequenceIds - 1);
      if (this.#sequenceId === 0) {
        do {
          currTimestamp = Snowflake.#currentTimestamp();
        } while (currTimestamp <= this.#lastTimestamp);
      }
    } else if (this.#sequenceId !== 0) {
      this.#sequenceId = 0;
    }
    this.#lastTimestamp = currTimestamp;

    let snowflakeId = BigInt(currTimestamp - Snowflake.#epoch) << BigInt(Snowflake.#BITS.machineProcessId + Snowflake.#BITS.sequenceId);
    snowflakeId |= BigInt(this.#machineProcessId) << BigInt(Snowflake.#BITS.sequenceId);
    snowflakeId |= BigInt(this.#sequenceId);
    return snowflakeId.toString();
  }

  /**
   * @method
   * @param {string} snowflakeId - snowflake id generated by getId
   * @returns {Object} snowflake decode object.
   * @returns {Object.timestamp} snowflake timestamp for snowflakeId.
   * @returns {Object.machineProcessId} snowflake machineProcessId for snowflakeId.
   * @returns {Object.sequenceId} snowflake sequenceId for snowflakeId.
   */
  decodeId(snowflakeId) {
    snowflakeId = BigInt(snowflakeId);

    const obj = {};
    obj.timestamp = (snowflakeId >> BigInt(Snowflake.#BITS.machineProcessId + Snowflake.#BITS.sequenceId)) + BigInt(Snowflake.#epoch);
    obj.machineProcessId = (snowflakeId >> BigInt(Snowflake.#BITS.sequenceId)) & BigInt(Snowflake.#totalMachineProcessIds - 1);
    obj.sequenceId = snowflakeId & BigInt(Snowflake.#totalSequenceIds - 1);

    Object.keys(obj).forEach(key => obj[key] = obj[key].toString());
    return obj;
  }
};

module.exports = Snowflake;
